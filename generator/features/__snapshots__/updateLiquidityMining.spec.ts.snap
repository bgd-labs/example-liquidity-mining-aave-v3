// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`feature: updateLiquidityMining > should properly generate files 1`] = `
{
  "jsonConfig": "import {ConfigFile} from '../../generator/types';
export const config: ConfigFile = {
  rootOptions: {
    pool: 'AaveV3EthereumLido',
    title: 'test',
    shortName: 'Test',
    date: '20231023',
    feature: 'UPDATE_LM',
  },
  poolOptions: {
    AaveV3EthereumLido: {
      configs: {
        UPDATE_LM: {
          emissionsAdmin: '0xac140648435d03f784879cd789130F22Ef588Fcd',
          rewardToken: 'AaveV3EthereumLidoAssets.wstETH_A_TOKEN',
          rewardTokenDecimals: 18,
          asset: 'wstETH_aToken',
          distributionEnd: '20',
          rewardAmount: '150',
          whaleAddress: '0x07833EAdF87CD3079da281395f2fBA24b61F90f7',
          whaleExpectedReward: '32.4',
        },
      },
      cache: {blockNumber: 42},
    },
  },
};
",
  "payloadTest": {
    "contractName": "AaveV3EthereumLido_LMUpdateTest_20231023",
    "payloadTest": "// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {AaveV3EthereumLido, AaveV3EthereumLidoAssets} from 'aave-address-book/AaveV3EthereumLido.sol';
import {IEmissionManager, ITransferStrategyBase, RewardsDataTypes, IEACAggregatorProxy} from '../../src/interfaces/IEmissionManager.sol';
import {LMUpdateBaseTest} from '../utils/LMUpdateBaseTest.sol';

contract AaveV3EthereumLido_LMUpdateTest_20231023 is LMUpdateBaseTest {
  address public constant override REWARD_ASSET = AaveV3EthereumLidoAssets.wstETH_A_TOKEN;
  uint256 public constant override NEW_TOTAL_DISTRIBUTION = 150 * 10 ** 18;
  address public constant override EMISSION_ADMIN = 0xac140648435d03f784879cd789130F22Ef588Fcd;
  address public constant override EMISSION_MANAGER = AaveV3EthereumLido.EMISSION_MANAGER;
  uint256 public constant NEW_DURATION_DISTRIBUTION_END = 20 days;
  address public constant awstETH_WHALE = 0x07833EAdF87CD3079da281395f2fBA24b61F90f7;

  address public constant override DEFAULT_INCENTIVES_CONTROLLER =
    AaveV3EthereumLido.DEFAULT_INCENTIVES_CONTROLLER;

  function setUp() public {
    vm.createSelectFork(vm.rpcUrl('mainnet'), 42);
  }

  function test_claimRewards() public {
    NewEmissionPerAsset memory newEmissionPerAsset = _getNewEmissionPerSecond();
    NewDistributionEndPerAsset memory newDistributionEndPerAsset = _getNewDistributionEnd();

    vm.startPrank(EMISSION_ADMIN);
    IEmissionManager(AaveV3EthereumLido.EMISSION_MANAGER).setEmissionPerSecond(
      newEmissionPerAsset.asset,
      newEmissionPerAsset.rewards,
      newEmissionPerAsset.newEmissionsPerSecond
    );
    IEmissionManager(AaveV3EthereumLido.EMISSION_MANAGER).setDistributionEnd(
      newDistributionEndPerAsset.asset,
      newDistributionEndPerAsset.reward,
      newDistributionEndPerAsset.newDistributionEnd
    );

    _testClaimRewardsForWhale(
      awstETH_WHALE,
      AaveV3EthereumLidoAssets.wstETH_A_TOKEN,
      NEW_DURATION_DISTRIBUTION_END,
      32.4 * 10 ** 18
    );
  }

  function _getNewEmissionPerSecond() internal pure override returns (NewEmissionPerAsset memory) {
    NewEmissionPerAsset memory newEmissionPerAsset;

    address[] memory rewards = new address[](1);
    rewards[0] = REWARD_ASSET;
    uint88[] memory newEmissionsPerSecond = new uint88[](1);
    newEmissionsPerSecond[0] = _toUint88(NEW_TOTAL_DISTRIBUTION / NEW_DURATION_DISTRIBUTION_END);

    newEmissionPerAsset.asset = AaveV3EthereumLidoAssets.wstETH_A_TOKEN;
    newEmissionPerAsset.rewards = rewards;
    newEmissionPerAsset.newEmissionsPerSecond = newEmissionsPerSecond;

    return newEmissionPerAsset;
  }

  function _getNewDistributionEnd()
    internal
    view
    override
    returns (NewDistributionEndPerAsset memory)
  {
    NewDistributionEndPerAsset memory newDistributionEndPerAsset;

    newDistributionEndPerAsset.asset = AaveV3EthereumLidoAssets.wstETH_A_TOKEN;
    newDistributionEndPerAsset.reward = REWARD_ASSET;
    newDistributionEndPerAsset.newDistributionEnd = _toUint32(
      block.timestamp + NEW_DURATION_DISTRIBUTION_END
    );

    return newDistributionEndPerAsset;
  }
}
",
    "pool": "AaveV3EthereumLido",
  },
}
`;

exports[`feature: updateLiquidityMining > should return reasonable code 1`] = `
{
  "code": {
    "constants": [
      "address public constant override REWARD_ASSET = AaveV3EthereumLidoAssets.wstETH_A_TOKEN;",
      "uint256 public constant override NEW_TOTAL_DISTRIBUTION = 150 * 10 ** 18;",
      "address public constant override EMISSION_ADMIN = 0xac140648435d03f784879cd789130F22Ef588Fcd;",
      "address public constant override EMISSION_MANAGER = AaveV3EthereumLido.EMISSION_MANAGER;",
      "uint256 public constant NEW_DURATION_DISTRIBUTION_END = 20 days;",
      "address public constant awstETH_WHALE = 0x07833EAdF87CD3079da281395f2fBA24b61F90f7;
",
      "address public constant override DEFAULT_INCENTIVES_CONTROLLER = AaveV3EthereumLido.DEFAULT_INCENTIVES_CONTROLLER;
",
    ],
    "fn": [
      "
          function test_claimRewards() public {
            NewEmissionPerAsset memory newEmissionPerAsset = _getNewEmissionPerSecond();
            NewDistributionEndPerAsset memory newDistributionEndPerAsset = _getNewDistributionEnd();

            vm.startPrank(EMISSION_ADMIN);
            IEmissionManager(AaveV3EthereumLido.EMISSION_MANAGER).setEmissionPerSecond(
              newEmissionPerAsset.asset,
              newEmissionPerAsset.rewards,
              newEmissionPerAsset.newEmissionsPerSecond
            );
            IEmissionManager(AaveV3EthereumLido.EMISSION_MANAGER).setDistributionEnd(
              newDistributionEndPerAsset.asset,
              newDistributionEndPerAsset.reward,
              newDistributionEndPerAsset.newDistributionEnd
            );

            _testClaimRewardsForWhale(
              awstETH_WHALE,
              AaveV3EthereumLidoAssets.wstETH_A_TOKEN,
              NEW_DURATION_DISTRIBUTION_END,
              32.4 * 10 ** 18
            );
          }

          function _getNewEmissionPerSecond() internal override pure returns (NewEmissionPerAsset memory) {
            NewEmissionPerAsset memory newEmissionPerAsset;

            address[] memory rewards = new address[](1);
            rewards[0] = REWARD_ASSET;
            uint88[] memory newEmissionsPerSecond = new uint88[](1);
            newEmissionsPerSecond[0] = _toUint88(NEW_TOTAL_DISTRIBUTION / NEW_DURATION_DISTRIBUTION_END);

            newEmissionPerAsset.asset = AaveV3EthereumLidoAssets.wstETH_A_TOKEN;
            newEmissionPerAsset.rewards = rewards;
            newEmissionPerAsset.newEmissionsPerSecond = newEmissionsPerSecond;

            return newEmissionPerAsset;
          }

          function _getNewDistributionEnd() internal override view returns (NewDistributionEndPerAsset memory) {
            NewDistributionEndPerAsset memory newDistributionEndPerAsset;

            newDistributionEndPerAsset.asset = AaveV3EthereumLidoAssets.wstETH_A_TOKEN;
            newDistributionEndPerAsset.reward = REWARD_ASSET;
            newDistributionEndPerAsset.newDistributionEnd = _toUint32(
              block.timestamp + NEW_DURATION_DISTRIBUTION_END
            );

            return newDistributionEndPerAsset;
          }
          ",
    ],
  },
}
`;
